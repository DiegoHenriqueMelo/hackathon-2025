/**
 * Testes de integra√ß√£o do fluxo completo do bot
 */

import { sendMessage } from '../../model/bot/botConfig/config.js';
import { salvarConsulta } from '../../database/bot/consultaDatabase.js';
import { buscarMedicosPorEspecialidadeDB } from '../../database/bot/medicosDatabase.js';

// Mocks
jest.mock('../../model/bot/botConfig/config.js');
jest.mock('../../database/bot/consultaDatabase.js');
jest.mock('../../database/bot/medicosDatabase.js');

const mockSendMessage = sendMessage as jest.MockedFunction<typeof sendMessage>;
const mockSalvarConsulta = salvarConsulta as jest.MockedFunction<typeof salvarConsulta>;
const mockBuscarMedicos = buscarMedicosPorEspecialidadeDB as jest.MockedFunction<typeof buscarMedicosPorEspecialidadeDB>;

describe('Bot Flow Integration Tests', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('Fluxo de Agendamento Completo', () => {
    it('deve completar agendamento de consulta do in√≠cio ao fim', async () => {
      const sessionId = 'test-session-agendamento';

      // Mock dos m√©dicos dispon√≠veis
      mockBuscarMedicos.mockResolvedValue({
        success: true,
        data: [{
          id_medico: 1,
          nome: 'Dr. Carlos',
          sobrenome: 'Silva',
          especialidade: 'Cardiologia'
        }]
      });

      // Mock do salvamento da consulta
      mockSalvarConsulta.mockResolvedValue({
        success: true,
        data: {
          id_consulta: 1,
          protocolo: 'AGD123456789'
        }
      });

      // Sequ√™ncia de mensagens do fluxo de agendamento
      const fluxoMensagens = [
        {
          input: 'Quero agendar uma consulta',
          expectedResponse: 'Qual especialidade voc√™ precisa?'
        },
        {
          input: 'Cardiologia',
          expectedResponse: 'Em qual cidade voc√™ prefere ser atendido?'
        },
        {
          input: 'S√£o Paulo',
          expectedResponse: 'Qual √© o seu nome completo?'
        },
        {
          input: 'Jo√£o Silva',
          expectedResponse: 'Qual √© o seu CPF?'
        },
        {
          input: '12345678901',
          expectedResponse: 'Temos os seguintes hor√°rios dispon√≠veis'
        },
        {
          input: '09:00',
          expectedResponse: '‚úÖ Agendamento realizado com sucesso!'
        }
      ];

      // Simular cada etapa do fluxo
      for (const etapa of fluxoMensagens) {
        mockSendMessage.mockResolvedValueOnce(etapa.expectedResponse);
        
        const response = await sendMessage(etapa.input, sessionId);
        
        expect(response).toContain(etapa.expectedResponse);
      }

      // Verificar se o agendamento foi salvo
      expect(mockSalvarConsulta).toHaveBeenCalledWith(
        expect.objectContaining({
          id_medico: 1,
          nome_paciente: expect.stringContaining('Jo√£o Silva'),
          cpf_paciente: '12345678901'
        })
      );
    });

    it('deve tratar especialidade indispon√≠vel', async () => {
      mockBuscarMedicos.mockResolvedValue({
        success: true,
        data: []
      });

      mockSendMessage.mockResolvedValue(
        'Desculpe, n√£o temos m√©dicos dispon√≠veis para essa especialidade no momento.'
      );

      const response = await sendMessage('Quero consulta com neurocirurgi√£o', 'session-test');

      expect(response).toContain('n√£o temos m√©dicos dispon√≠veis');
    });
  });

  describe('Fluxo de Verifica√ß√£o de Procedimentos', () => {
    it('deve autorizar procedimento simples imediatamente', async () => {
      mockSendMessage.mockResolvedValue(
        '‚úÖ Procedimento AUTORIZADO imediatamente!\n\nHemograma - Procedimento simples\nProtocolo: PROC123456789'
      );

      const response = await sendMessage('Posso fazer um hemograma?', 'session-proc');

      expect(response).toContain('AUTORIZADO imediatamente');
      expect(response).toContain('Protocolo: PROC');
    });

    it('deve solicitar auditoria para procedimento complexo', async () => {
      mockSendMessage.mockResolvedValue(
        '‚è≥ Procedimento em AUDITORIA\n\nTomografia - Procedimento complexo\nPrazo: 5 dias √∫teis\nProtocolo: PROC123456789'
      );

      const response = await sendMessage('Preciso fazer uma tomografia', 'session-proc');

      expect(response).toContain('AUDITORIA');
      expect(response).toContain('5 dias √∫teis');
      expect(response).toContain('Protocolo: PROC');
    });

    it('deve solicitar auditoria OPME para procedimentos especiais', async () => {
      mockSendMessage.mockResolvedValue(
        '‚è≥ Procedimento OPME em auditoria\n\nAngioplastia - Procedimento OPME\nPrazo: 10 dias √∫teis\nProtocolo: PROC123456789'
      );

      const response = await sendMessage('Preciso fazer angioplastia', 'session-proc');

      expect(response).toContain('OPME');
      expect(response).toContain('10 dias √∫teis');
    });
  });

  describe('Fluxo de An√°lise de Documentos', () => {
    it('deve analisar documento e identificar m√∫ltiplos procedimentos', async () => {
      const documentoTexto = `
        PEDIDO M√âDICO
        Paciente: Jo√£o Silva
        Procedimentos solicitados:
        1. Hemograma completo
        2. Tomografia de t√≥rax
        3. Resson√¢ncia magn√©tica
      `;

      mockSendMessage.mockResolvedValue(`
        üìÑ Documento analisado com sucesso!
        
        Procedimentos identificados:
        
        ‚úÖ Hemograma completo - AUTORIZADO (Protocolo: PROC001)
        ‚è≥ Tomografia de t√≥rax - AUDITORIA 5 dias (Protocolo: PROC002)  
        ‚è≥ Resson√¢ncia magn√©tica - AUDITORIA 5 dias (Protocolo: PROC003)
      `);

      const response = await sendMessage(
        `DOCUMENTO ANEXADO: pedido.pdf\n\nCONTE√öDO:\n${documentoTexto}\n\nAN√ÅLISE SOLICITADA: Analise este documento`,
        'session-doc'
      );

      expect(response).toContain('Documento analisado');
      expect(response).toContain('Hemograma completo - AUTORIZADO');
      expect(response).toContain('Tomografia de t√≥rax - AUDITORIA');
      expect(response).toContain('PROC001');
      expect(response).toContain('PROC002');
      expect(response).toContain('PROC003');
    });

    it('deve tratar documento sem procedimentos identific√°veis', async () => {
      const documentoTexto = 'Texto gen√©rico sem procedimentos m√©dicos';

      mockSendMessage.mockResolvedValue(
        '‚ùå N√£o foi poss√≠vel identificar procedimentos m√©dicos neste documento. Voc√™ pode me informar quais exames ou procedimentos voc√™ precisa?'
      );

      const response = await sendMessage(
        `DOCUMENTO ANEXADO: documento.pdf\n\nCONTE√öDO:\n${documentoTexto}`,
        'session-doc'
      );

      expect(response).toContain('N√£o foi poss√≠vel identificar procedimentos');
    });
  });

  describe('Fluxo de Consulta de Agendamentos', () => {
    it('deve consultar agendamentos existentes por CPF', async () => {
      mockSendMessage.mockResolvedValue(`
        üìÖ Seus agendamentos:
        
        1. Cardiologia - Dr. Carlos Silva
           Data: 15/01/2024 √†s 09:00
           Protocolo: AGD123456789
           Status: Agendada
           
        2. Dermatologia - Dra. Ana Santos  
           Data: 20/01/2024 √†s 14:00
           Protocolo: AGD987654321
           Status: Confirmada
      `);

      const response = await sendMessage('Meu CPF √© 12345678901, quais s√£o meus agendamentos?', 'session-consulta');

      expect(response).toContain('Seus agendamentos');
      expect(response).toContain('Dr. Carlos Silva');
      expect(response).toContain('AGD123456789');
    });

    it('deve informar quando n√£o h√° agendamentos', async () => {
      mockSendMessage.mockResolvedValue(
        'üìÖ N√£o encontrei agendamentos para o CPF informado. Gostaria de agendar uma nova consulta?'
      );

      const response = await sendMessage('Meu CPF √© 99999999999', 'session-consulta');

      expect(response).toContain('N√£o encontrei agendamentos');
    });
  });

  describe('Tratamento de Erros e Casos Especiais', () => {
    it('deve tratar erro de conex√£o com OpenAI', async () => {
      mockSendMessage.mockRejectedValue(new Error('API key invalid'));

      try {
        await sendMessage('Teste', 'session-error');
      } catch (error) {
        expect(error).toBeInstanceOf(Error);
      }
    });

    it('deve tratar erro no banco de dados durante agendamento', async () => {
      mockSalvarConsulta.mockResolvedValue({
        success: false,
        error: 'Erro de conex√£o com banco'
      });

      mockSendMessage.mockResolvedValue(
        '‚ùå Erro interno. Tente novamente em alguns minutos.'
      );

      const response = await sendMessage('Confirmar agendamento', 'session-error');

      expect(response).toContain('Erro interno');
    });

    it('deve manter contexto da sess√£o entre mensagens', async () => {
      const sessionId = 'session-contexto';

      // Primeira mensagem
      mockSendMessage.mockResolvedValueOnce('Qual especialidade voc√™ precisa?');
      await sendMessage('Quero agendar consulta', sessionId);

      // Segunda mensagem deve manter contexto
      mockSendMessage.mockResolvedValueOnce('Em qual cidade voc√™ prefere?');
      const response = await sendMessage('Cardiologia', sessionId);

      expect(response).toContain('cidade');
    });

    it('deve limpar sess√µes antigas automaticamente', async () => {
      // Este teste verificaria a limpeza autom√°tica de sess√µes
      // Em um ambiente real, testaria ap√≥s 30 minutos de inatividade
      
      mockSendMessage.mockResolvedValue('Nova sess√£o iniciada');
      
      const response = await sendMessage('Ol√°', 'session-muito-antiga');
      
      expect(response).toBeDefined();
    });
  });

  describe('Valida√ß√µes de Entrada', () => {
    it('deve validar formato de CPF', async () => {
      mockSendMessage.mockResolvedValue(
        'Por favor, informe um CPF v√°lido com 11 d√≠gitos.'
      );

      const response = await sendMessage('Meu CPF √© 123', 'session-validacao');

      expect(response).toContain('CPF v√°lido');
    });

    it('deve validar datas de agendamento', async () => {
      mockSendMessage.mockResolvedValue(
        'S√≥ √© poss√≠vel agendar consultas para os pr√≥ximos 30 dias.'
      );

      const response = await sendMessage('Quero agendar para dezembro de 2025', 'session-validacao');

      expect(response).toContain('pr√≥ximos 30 dias');
    });

    it('deve validar hor√°rios de funcionamento', async () => {
      mockSendMessage.mockResolvedValue(
        'Nosso hor√°rio de atendimento √© das 08:00 √†s 12:00.'
      );

      const response = await sendMessage('Posso agendar √†s 15:00?', 'session-validacao');

      expect(response).toContain('08:00 √†s 12:00');
    });
  });
});